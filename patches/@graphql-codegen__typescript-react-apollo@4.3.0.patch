diff --git a/cjs/visitor.js b/cjs/visitor.js
index 5b29e6ffce01be5818046cca954811ea43cfa2ea..402ede483ff5ef3a21a9e2dc6b45fc33b038b808 100644
--- a/cjs/visitor.js
+++ b/cjs/visitor.js
@@ -91,6 +91,9 @@ class ReactApolloVisitor extends visitor_plugin_common_1.ClientSideBaseVisitor {
     getApolloReactHooksImport(isTypeImport) {
         return `${this.getImportStatement(isTypeImport)} * as ${this.getApolloReactHooksIdentifier()} from '${this.config.apolloReactHooksImportFrom}';`;
     }
+    getApolloReactSSRHooksImport() {
+        return `${this.getImportStatement(false)} * as ApolloSSRHooks from '@apollo/experimental-nextjs-app-support/ssr';`;
+    }
     getOmitDeclaration() {
         return visitor_plugin_common_1.OMIT_TYPE;
     }
@@ -235,13 +238,16 @@ class ReactApolloVisitor extends visitor_plugin_common_1.ClientSideBaseVisitor {
         }) + this.config.hooksSuffix;
         this.imports.add(this.getApolloReactCommonImport(true));
         this.imports.add(this.getApolloReactHooksImport(false));
+        this.imports.add(this.getApolloReactSSRHooksImport())
         this.imports.add(this.getDefaultOptions());
+
+        const hooks = operationType !== 'Mutation'? "ApolloSSRHooks": this.getApolloReactHooksIdentifier();
         const hookFns = [
             `export function use${operationName}(baseOptions${shouldEnforceRequiredVariables ? '' : '?'}: ${this.getApolloReactHooksIdentifier()}.${operationType}HookOptions<${operationResultType}, ${operationVariablesTypes}>${!shouldEnforceRequiredVariables
                 ? ''
                 : ` & ({ variables: ${operationVariablesTypes}; skip?: boolean; } | { skip: boolean; }) `}) {
         const options = {...defaultOptions, ...baseOptions}
-        return ${this.getApolloReactHooksIdentifier()}.use${operationType}<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(node, documentVariableName)}, options);
+        return ${hooks}.use${operationType}<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(node, documentVariableName)}, options);
       }`,
         ];
         if (this.config.addDocBlocks) {
@@ -266,7 +272,7 @@ class ReactApolloVisitor extends visitor_plugin_common_1.ClientSideBaseVisitor {
             }) + this.config.hooksSuffix;
             hookFns.push(`export function use${suspenseOperationName}(baseOptions?: ${this.getApolloReactHooksIdentifier()}.SuspenseQueryHookOptions<${operationResultType}, ${operationVariablesTypes}>) {
           const options = {...defaultOptions, ...baseOptions}
-          return ${this.getApolloReactHooksIdentifier()}.useSuspenseQuery<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(node, documentVariableName)}, options);
+          return ApolloSSRHooks.useSuspenseQuery<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(node, documentVariableName)}, options);
         }`);
             hookResults.push(`export type ${suspenseOperationName}HookResult = ReturnType<typeof use${suspenseOperationName}>;`);
         }
diff --git a/esm/visitor.js b/esm/visitor.js
index d43c882947fd41228dfce6fec54012e99766ae57..bd45fe4f3dbbe0e2cde3383ec2ad64b504e60b32 100644
--- a/esm/visitor.js
+++ b/esm/visitor.js
@@ -87,6 +87,9 @@ export class ReactApolloVisitor extends ClientSideBaseVisitor {
     getApolloReactHooksImport(isTypeImport) {
         return `${this.getImportStatement(isTypeImport)} * as ${this.getApolloReactHooksIdentifier()} from '${this.config.apolloReactHooksImportFrom}';`;
     }
+    getApolloReactSSRHooksImport() {
+        return `${this.getImportStatement(false)} * as ApolloSSRHooks from '@apollo/experimental-nextjs-app-support/ssr';`;
+    }
     getOmitDeclaration() {
         return OMIT_TYPE;
     }
@@ -231,13 +234,16 @@ export class ReactApolloVisitor extends ClientSideBaseVisitor {
         }) + this.config.hooksSuffix;
         this.imports.add(this.getApolloReactCommonImport(true));
         this.imports.add(this.getApolloReactHooksImport(false));
+        this.imports.add(this.getApolloReactSSRHooksImport())
         this.imports.add(this.getDefaultOptions());
+
+        const hooks = operationType !== 'Mutation'? "ApolloSSRHooks": this.getApolloReactHooksIdentifier();
         const hookFns = [
             `export function use${operationName}(baseOptions${shouldEnforceRequiredVariables ? '' : '?'}: ${this.getApolloReactHooksIdentifier()}.${operationType}HookOptions<${operationResultType}, ${operationVariablesTypes}>${!shouldEnforceRequiredVariables
                 ? ''
                 : ` & ({ variables: ${operationVariablesTypes}; skip?: boolean; } | { skip: boolean; }) `}) {
         const options = {...defaultOptions, ...baseOptions}
-        return ${this.getApolloReactHooksIdentifier()}.use${operationType}<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(node, documentVariableName)}, options);
+        return ${hooks}.use${operationType}<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(node, documentVariableName)}, options);
       }`,
         ];
         if (this.config.addDocBlocks) {
@@ -256,13 +262,14 @@ export class ReactApolloVisitor extends ClientSideBaseVisitor {
           return ${this.getApolloReactHooksIdentifier()}.useLazyQuery<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(node, documentVariableName)}, options);
         }`);
             hookResults.push(`export type ${lazyOperationName}HookResult = ReturnType<typeof use${lazyOperationName}>;`);
+            
             const suspenseOperationName = this.convertName(nodeName, {
                 suffix: pascalCase('SuspenseQuery'),
                 useTypesPrefix: false,
             }) + this.config.hooksSuffix;
             hookFns.push(`export function use${suspenseOperationName}(baseOptions?: ${this.getApolloReactHooksIdentifier()}.SuspenseQueryHookOptions<${operationResultType}, ${operationVariablesTypes}>) {
           const options = {...defaultOptions, ...baseOptions}
-          return ${this.getApolloReactHooksIdentifier()}.useSuspenseQuery<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(node, documentVariableName)}, options);
+          return ApolloSSRHooks.useSuspenseQuery<${operationResultType}, ${operationVariablesTypes}>(${this.getDocumentNodeVariable(node, documentVariableName)}, options);
         }`);
             hookResults.push(`export type ${suspenseOperationName}HookResult = ReturnType<typeof use${suspenseOperationName}>;`);
         }
