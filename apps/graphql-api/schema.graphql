# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddAlternativeProductInput {
  alternativeProductId: String!
}

type AddAlternativeProductPayload {
  product: Product
}

input AddProductLinkInput {
  displayLink: String!
  iconUrl: String!
  link: String!
  title: String!
}

type AddProductLinkPayload {
  product: Product
}

input AddProductScreenshotInput {
  imageAlt: String!
  imageUrl: String!
}

type AddProductScreenshotPayload {
  product: Product
}

type Company {
  address: String!
  id: ID!
  name: String!
  region: String!
  size: String!
  startAt: DateTimeISO!
  type: String!
}

input CreateCompanyInput {
  address: String!
  name: String!
  region: String!
  size: String!
  startAt: DateTimeISO!
  type: String!
}

type CreateCompanyPayload {
  company: Company!
}

input CreateProductFeatureInput {
  emoji: String!
  name: String!
  productSlug: String!
  summary: String!
}

type CreateProductFeaturePayload {
  feature: Feature!
}

input CreateProductInput {
  description: String
  logoUrl: String!
  name: String!
  slug: String!
  summary: String!
}

type CreateProductPayload {
  product: Product!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input EditProductInput {
  description: String
  logoUrl: String
  name: String
  summary: String
}

type EditProductPayload {
  product: Product!
}

type Feature {
  emoji: String!
  id: ID!
  name: String!
  screenshots: [FeatureScreenshot!]!
  summary: String
}

type FeatureScreenshot {
  id: ID!
  imageAlt: String!
  imageUrl: String!
}

input IndexProductInput {
  slug: String!
}

type IndexProductPayload {
  indexed: Boolean!
}

type Link {
  displayLink: String!
  iconUrl: String!
  id: ID!
  isPrimary: Boolean!
  link: String!
  title: String!
}

type Mutation {
  addAlternativeProduct(input: AddAlternativeProductInput!, slug: String!): AddAlternativeProductPayload!
  addProductLink(input: AddProductLinkInput!, slug: String!): AddProductLinkPayload!
  addProductScreenshot(input: AddProductScreenshotInput!, slug: String!): AddProductScreenshotPayload!
  createCompany(input: CreateCompanyInput!): CreateCompanyPayload!
  createProduct(input: CreateProductInput!): CreateProductPayload!
  createProductFeature(input: CreateProductFeatureInput!): CreateProductFeaturePayload!
  editProduct(input: EditProductInput!, slug: String!): EditProductPayload!
  indexProduct(input: IndexProductInput!): IndexProductPayload!
  publishProduct(input: PublishProductInput!): PublishProductPayload!
  signImageUpload(input: SignImageUploadInput!): SignImageUploadPayload!
  updateProductFeature(id: String!, input: UpdateProductFeatureInput!): UpdateProductFeaturePayload!
  updateProductTags(input: UpdateProductTagsInput!, slug: String!): UpdateProductTagsPayload!
  upvoteProduct(slug: String!): UpvoteProductPayload!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Product {
  alternatives: [Product!]!
  description: String
  features: [Feature!]!
  id: ID!
  links: [Link!]!
  logoUrl: String!
  name: String!
  ownedCompany: Company
  ownedCompanyId: String
  publishedAt: DateTimeISO
  screenshots: [Screenshot!]!
  slug: String!
  summary: String!
  tags: [Tag!]!
  updatedAt: DateTimeISO
  voteCount: Int!
}

type ProductConnection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductEdge {
  cursor: String!
  node: Product!
}

input PublishProductInput {
  slug: String!
}

type PublishProductPayload {
  product: Product!
}

type Query {
  allProducts(after: String, before: String, first: Int, last: Int): ProductConnection!
  feature(id: ID!): Feature
  hello: String!
  product(id: ID!): Product
  productBySlug(slug: String!): Product
  productsCount: Int!
  recentProducts(first: Int!): [Product!]!
  searchProducts(query: String!): [Product!]!
  tempProductBySlug(slug: String!): Product
}

type Screenshot {
  id: ID!
  imageAlt: String!
  imageUrl: String!
}

input SignImageUploadInput {
  displayName: String!
  folder: String!
}

type SignImageUploadPayload {
  folder: String!
  signature: String!
  timestamp: Float!
}

type Tag {
  id: ID!
  name: String!
}

input UpdateProductFeatureInput {
  emoji: String
  name: String
  summary: String
}

type UpdateProductFeaturePayload {
  feature: Feature!
}

input UpdateProductTagsInput {
  tagNames: [String!]!
}

type UpdateProductTagsPayload {
  product: Product
}

type UpvoteProductPayload {
  product: Product
}